        /// <summary>
        /// Encrypts a file with a password. The password get salted. The file will be rewritten. The first bytes of the encrypted file contains the used salt and IV.
        /// </summary>
        /// <param name="file">The file to encrypt</param>
        /// <param name="password">The password </param>
        public static void EncryptFileWithPassword(FileInfo file, string password)
        {
            if (file == null || !file.Exists)
                throw new FileNotFoundException();

            var bytes = File.ReadAllBytes(file.FullName);

            byte[] cipherText;
            using (var fileStream = new FileStream(file.FullName, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
            {
                cipherText = EncryptWithPassword(bytes, password);
                fileStream.Write(cipherText, 0, cipherText.Length);
            }
        }

        /// <summary>
        /// Decrypts a file with a password. Salt and IV are extracted from the file cipher.
        /// </summary>
        /// <param name="file">The file to decrypt</param>
        /// <param name="password">The password</param>
        public static void DecryptFileWithPassword(FileInfo file, string password)
        {
            if (file == null || !file.Exists)
                throw new FileNotFoundException();

            var bytes = File.ReadAllBytes(file.FullName);

            using (var fileStream =
                new FileStream(file.FullName, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
            {
                var m = DecryptWithPassword(bytes, password);
                fileStream.Write(m, 0, m.Length);
            }
        }

        /// <summary>
        /// Encrypts a message with a password.
        /// </summary>
        /// <param name="secretMessage">The message to encrypt</param>
        /// <param name="password">The password</param>
        /// <param name="encoding">The encoding of the message</param>
        /// <returns>The encrypted message converted to a Base64 string</returns>
        public static string EncryptWithPassword(string secretMessage, string password, Encoding encoding)
        {
            if (string.IsNullOrEmpty(secretMessage))
                throw new ArgumentException("Secret Message Required!", nameof(secretMessage));

            var plainText = encoding.GetBytes(secretMessage);
            var cipherText = EncryptWithPassword(plainText, password);
            return Convert.ToBase64String(cipherText);
        }

        /// <summary>
        /// Encrypts a message with a password.
        /// </summary>
        /// <param name="secretMessage">The message to encrypt</param>
        /// <param name="password">The password</param>
        /// <returns>The encrypted message</returns>
        public static byte[] EncryptWithPassword(byte[] secretMessage, string password)
        {
            var nonSecretPayload = new byte[] { };
            var payload = new byte[SaltBitSize / 8 * 2];
            Array.Copy(nonSecretPayload, payload, nonSecretPayload.Length);
            var payloadIndex = nonSecretPayload.Length;

            byte[] cryptKey;
            byte[] authKey;

            using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))
            {
                var salt = generator.Salt;
                cryptKey = generator.GetBytes(KeyBitSize / 8);
                Array.Copy(salt, 0, payload, payloadIndex, salt.Length);
                payloadIndex += salt.Length;
            }

            using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))
            {
                var salt = generator.Salt;
                authKey = generator.GetBytes(KeyBitSize / 8);
                Array.Copy(salt, 0, payload, payloadIndex, salt.Length);
            }

            return Encrypt(secretMessage, cryptKey, authKey, payload);
        }

        /// <summary>
        /// Decrypts a message with a password
        /// </summary>
        /// <param name="encryptedMessage">The encrypted message</param>
        /// <param name="password">The password</param>
        /// <param name="encoding">The encoding of the decrypted message</param>
        /// <returns>The decrypted message</returns>
        public static string DecryptWithPassword(string encryptedMessage, string password, Encoding encoding)
        {
            if (string.IsNullOrWhiteSpace(encryptedMessage))
                throw new ArgumentException("Encrypted Message Required!", nameof(encryptedMessage));

            var cipherText = Convert.FromBase64String(encryptedMessage);
            var plainText = DecryptWithPassword(cipherText, password);
            return plainText == null ? null : Encoding.UTF8.GetString(plainText);
        }

        /// <summary>
        /// Decrypts a message with a password
        /// </summary>
        /// <param name="encryptedMessage">The encrypted message</param>
        /// <param name="password">The password</param>
        /// <returns>The decrypted message</returns>
        public static byte[] DecryptWithPassword(byte[] encryptedMessage, string password)
        {
            if (encryptedMessage == null || encryptedMessage.Length == 0)
                throw new ArgumentException("Encrypted Message Required!", nameof(encryptedMessage));

            var cryptSalt = new byte[SaltBitSize / 8];
            var authSalt = new byte[SaltBitSize / 8];

            //Grab Salt from Non-Secret Payload
            Array.Copy(encryptedMessage, 0, cryptSalt, 0, cryptSalt.Length);
            Array.Copy(encryptedMessage, cryptSalt.Length, authSalt, 0, authSalt.Length);

            byte[] cryptKey;
            byte[] authKey;

            //Generate crypt key
            using (var generator = new Rfc2898DeriveBytes(password, cryptSalt, Iterations))
            {
                cryptKey = generator.GetBytes(KeyBitSize / 8);
            }

            using (var generator = new Rfc2898DeriveBytes(password, authSalt, Iterations))
            {
                authKey = generator.GetBytes(KeyBitSize / 8);
            }

            return Decrypt(encryptedMessage, cryptKey, authKey, cryptSalt.Length + authSalt.Length);
        }